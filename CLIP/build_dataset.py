from torch.utils.data import Dataset
import nibabel as nib
import pandas as pd
from glob import glob
import numpy as np

'''
This script builds a dataset from the prompt CSV file generated by build_prompt_file.py.

由于pku_train_dataset中ct图像的header元数据中 'scl_slope' 和 'scl_inter' 均为nan，因此不计算HU值，直接使用原始的CT图像数据。

其中每一项包含以下字段：
- image: 2D切片的CT图像数据
- mask: 2D切片的二进制掩码（针对特定器官，每个voxel处0表示无该器官，1表示有该器官）
- prompt: 器官名称
'''

class MedicalDataset(Dataset):
    def __init__(self, prompt_csv, transform=None):
        self.df = pd.read_csv(prompt_csv)
        self.transform = transform
        
    def __len__(self):
        return len(self.df)
    
    def __getitem__(self, idx):
        row = self.df.iloc[idx]    # 一整行数据，包含"image_path"，"mask_path"，"slice_index"，"organ"，"label"
        img_obj = nib.load(row["image_path"])
        img_vol = img_obj.get_fdata()   # 3D CT图像数据
        # 看上去ct header元数据中 'scl_slope' 和 'scl_inter' 均为nan
        # img_hdr = img_obj.header    # 获取图像头部信息，为了计算HU
        # slope = img_hdr['scl_slope'] if 'scl_slope' in img_hdr else 1.0
        # intercept = img_hdr['scl_inter'] if 'scl_inter' in img_hdr else -1024.0
        # hu_vol    = img_vol * slope + intercept

        mask_vol = nib.load(row["mask_path"]).get_fdata().astype(int)
        z = int(row["slice_index"])
        # extract 2D slice
        img_slice  = img_vol[:, :, z]
        # img_slice = hu_vol[:, :, z]
        mask_slice = mask_vol[:, :, z]
        
        # build binary mask for this organ
        bin_mask = (mask_slice == row["label"]).astype(np.uint8)
        prompt = row["organ"]
        sample = {
            "image":  img_slice,
            "mask":   bin_mask,
            "prompt": prompt
        }
        if self.transform:
            sample = self.transform(sample)
        return sample

